---
import Layout from '../layouts/Layout.astro';

const { path } = Astro.params;
const formattedPath = path?.replace(/[/-]/g, ' ').trim() || '404';
---

<Layout>
  <div id="stars"></div>
  <div id="stars2"></div>
  <div id="stars3"></div>
  
  <div id="container">
    <main>
      <section id="hero">
        <div class="article-id">Guide Entry #{Math.floor(Math.random() * 900000) + 100000}-{['alpha', 'beta', 'gamma', 'delta', 'epsilon'][Math.floor(Math.random() * 5)]}</div>
        <h1 class="article-title">{formattedPath}</h1>
        <div class="guide-entry">
          <div id="loading" class="loading">
            <div class="loading-text">
              <span class="blink">&gt;</span> Computing improbabilities...
            </div>
            <div class="loading-subtext">Please wait while the Guide consults its quantum processors</div>
          </div>
          <div id="content" class="guide-text hidden"></div>
          <div id="error" class="error hidden">
            <p>The Guide seems to be experiencing technical difficulties. Please try again later.</p>
            <p class="note">Error Code: IMPROBABILITY_OVERFLOW</p>
          </div>
        </div>
        <section id="links">
          <a class="button" href="/">Return to Earth</a>
        </section>
      </section>
    </main>
  </div>
</Layout>

<script>
  async function loadArticle() {
    const content = document.getElementById('content');
    const loading = document.getElementById('loading');
    const error = document.getElementById('error');
    
    if (!content || !loading || !error) return;
    
    try {
      const path = window.location.pathname;
      console.log('Fetching article for path:', path);
      
      const response = await fetch(`/api/article${path}`);
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('Error response:', errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Received data:', data);
      
      if (data.error) throw new Error(data.error);
      if (!data.content) throw new Error('No content received');
      
      content.innerHTML = data.content;
      content.classList.remove('hidden');
      loading.classList.add('hidden');
    } catch (e) {
      console.error('Error loading article:', e);
      error.classList.remove('hidden');
      loading.classList.add('hidden');
    }
  }

  loadArticle();
</script>

<style>
  #container {
    height: 100%;
    padding: 2rem;
  }

  main {
    height: 100%;
    display: flex;
    justify-content: center;
    max-width: 800px;
    margin: 0 auto;
  }

  #hero {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: flex-start;
    text-align: center;
    padding: 16px;
    width: 100%;
  }

  .article-id {
    font-family: 'Share Tech Mono', monospace;
    color: var(--guide-green);
    opacity: 0.8;
    font-size: 1rem;
    margin-bottom: 0.5rem;
    letter-spacing: 1px;
  }

  h1.article-title {
    font-size: 3rem;
    margin: 0 0 2rem;
    letter-spacing: 2px;
    text-shadow: 0 0 20px var(--guide-green);
    animation: pulse 2s infinite;
    text-transform: capitalize;
  }

  :global(img) {
    float: right;
    margin-left: 1rem;
    margin-bottom: 1rem;
    border: 1px solid var(--guide-green-25);
    border-radius: 4px;
  }

  @keyframes pulse {
    0% { text-shadow: 0 0 20px var(--guide-green); }
    50% { text-shadow: 0 0 40px var(--guide-green); }
    100% { text-shadow: 0 0 20px var(--guide-green); }
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }

  .blink {
    animation: blink 1s infinite;
    margin-right: 0.5rem;
    display: inline-block;
  }

  #links {
    display: flex;
    gap: 16px;
  }

  .button {
    display: flex;
    align-items: center;
    padding: 12px 24px;
    color: #000;
    background: var(--guide-green);
    text-decoration: none;
    border-radius: 4px;
    font-weight: bold;
    transition: all 0.2s;
  }

  .button:hover {
    background: #fff;
    box-shadow: 0 0 20px var(--guide-green);
    transform: scale(1.05);
  }

  .guide-entry {
    background: rgba(37, 248, 142, 0.1);
    border: 1px solid var(--guide-green);
    border-radius: 8px;
    padding: 2rem;
    margin: 0 0 2rem;
    max-width: 600px;
    text-align: left;
    backdrop-filter: blur(5px);
    min-height: 300px;
    position: relative;
  }

  .guide-text {
    font-size: 1.1rem;
    line-height: 1.6;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .guide-text:not(.hidden) {
    opacity: 1;
  }

  .guide-text :global(a) {
    color: #fff;
    text-decoration: none;
    position: relative;
    padding: 0.1em 0.4em;
    margin: 0 0.1em;
    transition: all 0.2s ease;
    font-weight: 600;
    background: rgba(37, 248, 142, 0.1);
    border: 1px solid rgba(37, 248, 142, 0.3);
    border-radius: 4px;
    text-shadow: 0 0 4px var(--guide-green);
  }

  .guide-text :global(a::after) {
    content: 'â†—';
    display: inline-block;
    margin-left: 0.2em;
    font-size: 0.8em;
    opacity: 0.8;
    transform: translateX(0);
    transition: all 0.2s ease;
  }

  .guide-text :global(a:hover) {
    text-shadow: 0 0 10px var(--guide-green);
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    gap: 1rem;
  }

  .loading-text {
    font-size: 1.2rem;
    color: var(--guide-green);
  }

  .loading-subtext {
    font-size: 0.9rem;
    opacity: 0.7;
    font-style: italic;
  }

  .error {
    text-align: center;
    color: var(--guide-green);
    padding: 2rem;
  }

  .error .note {
    font-size: 0.9rem;
    opacity: 0.7;
    font-style: italic;
    margin-top: 1rem;
  }

  .hidden {
    display: none;
  }

  @media screen and (max-width: 768px) {
    h1.article-title {
      font-size: 2rem;
    }

    .guide-entry {
      margin: 0 1rem;
      width: calc(100% - 2rem);
    }
  }
</style>