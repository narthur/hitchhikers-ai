---
import Layout from "../layouts/Layout.astro";

const query = Astro.url.searchParams.get("q") || "";
---

<Layout>
  <div id="container">
    <main>
      <section id="hero">
        <h1>DON'T PANIC</h1>
        <div class="search-container">
          <form id="search-form" class="search-form">
            <input
              type="text"
              name="q"
              value={query}
              placeholder="Search the Guide..."
              class="search-input"
            />
            <button type="submit" class="search-button">Search</button>
          </form>
        </div>

        <div id="results-container" class="results-container">
          <div id="loading" class="loading hidden">
            <div class="loading-text">
              <span class="blink">&gt;</span> Computing search probabilities...
            </div>
            <div class="loading-subtext">
              Please wait while the Guide consults its quantum processors
            </div>
          </div>

          <div id="results" class="search-results hidden"></div>

          <div id="error" class="error hidden">
            <p>
              The Guide seems to be experiencing technical difficulties. Please
              try again later.
            </p>
            <p class="note">Error Code: SEARCH_IMPROBABILITY_OVERFLOW</p>
          </div>

          <p class="note">
            Note: The Hitchhiker's Guide to the Galaxy's search algorithm is
            powered by the Infinite Improbability Drive, results may vary wildly
            across parallel universes.
          </p>
        </div>
      </section>
    </main>
  </div>
</Layout>

<script>
  const form = document.getElementById("search-form") as HTMLFormElement;
  const loading = document.getElementById("loading");
  const results = document.getElementById("results");
  const error = document.getElementById("error");
  const input = form?.querySelector('input[name="q"]') as HTMLInputElement;

  // Show initial results if we have a query
  if (input?.value) {
    performSearch(input.value);
  }

  form?.addEventListener("submit", (e) => {
    e.preventDefault();
    const query = input?.value || "";

    // Update URL without reloading
    const url = new URL(window.location.href);
    url.searchParams.set("q", query);
    window.history.pushState({}, "", url);

    performSearch(query);
  });

  async function performSearch(query: string) {
    if (!loading || !results || !error) return;

    // Reset state
    results.classList.add("hidden");
    error.classList.add("hidden");

    if (!query.trim()) {
      loading.classList.add("hidden");
      return;
    }

    // Show loading
    loading.classList.remove("hidden");

    try {
      const response = await fetch(
        `/api/search?q=${encodeURIComponent(query)}`
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = (await response.json()) as {
        content?: string;
        error?: string;
      };

      if (data.error) throw new Error(data.error);
      if (!data.content) throw new Error("No content received");

      results.innerHTML = data.content;
      results.classList.remove("hidden");
      loading.classList.add("hidden");
    } catch (e) {
      console.error("Error performing search:", e);
      error.classList.remove("hidden");
      loading.classList.add("hidden");
    }
  }
</script>

<style>
  #container {
    height: 100%;
    padding: 2rem;
  }

  main {
    height: 100%;
    display: flex;
    justify-content: center;
    max-width: 800px;
    margin: 0 auto;
  }

  #hero {
    display: flex;
    align-items: center;
    flex-direction: column;
    justify-content: flex-start;
    text-align: center;
    padding: 16px;
    width: 100%;
  }

  h1 {
    font-size: 4rem;
    margin: 0;
    letter-spacing: 4px;
    text-shadow: 0 0 20px var(--guide-green);
    animation: pulse 2s infinite;
  }

  h2 {
    font-size: 1.5rem;
    margin: 2rem 0;
    opacity: 0.9;
  }

  @keyframes pulse {
    0% {
      text-shadow: 0 0 20px var(--guide-green);
    }
    50% {
      text-shadow: 0 0 40px var(--guide-green);
    }
    100% {
      text-shadow: 0 0 20px var(--guide-green);
    }
  }

  .search-container {
    width: 100%;
    max-width: 600px;
    margin: 2rem 0;
  }

  .search-form {
    display: flex;
    gap: 1rem;
  }

  .search-input {
    flex: 1;
    background: rgba(37, 248, 142, 0.1);
    border: 1px solid var(--guide-green);
    border-radius: 4px;
    padding: 0.8rem 1rem;
    color: var(--guide-green);
    font-family: "Share Tech Mono", monospace;
    font-size: 1rem;
  }

  .search-input:focus {
    outline: none;
    box-shadow: 0 0 10px var(--guide-green);
  }

  .search-button {
    background: var(--guide-green);
    border: none;
    border-radius: 4px;
    padding: 0.8rem 1.5rem;
    color: #000;
    font-family: "Share Tech Mono", monospace;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s;
  }

  .search-button:hover {
    background: #fff;
    box-shadow: 0 0 20px var(--guide-green);
  }

  .results-container {
    width: 100%;
    max-width: 600px;
    text-align: left;
  }

  .loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 200px;
    gap: 1rem;
    margin: 2rem 0;
  }

  .loading-text {
    font-size: 1.2rem;
    color: var(--guide-green);
  }

  .loading-subtext {
    font-size: 0.9rem;
    opacity: 0.7;
    font-style: italic;
  }

  @keyframes blink {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }

  .blink {
    animation: blink 1s infinite;
    margin-right: 0.5rem;
    display: inline-block;
  }

  .search-results {
    background: rgba(37, 248, 142, 0.1);
    border: 1px solid var(--guide-green);
    border-radius: 8px;
    padding: 2rem;
    margin: 2rem 0;
    backdrop-filter: blur(5px);
  }

  .search-results :global(ul) {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .search-results :global(li) {
    background: rgba(37, 248, 142, 0.05);
    border: 1px solid rgba(37, 248, 142, 0.2);
    border-radius: 6px;
    padding: 1.2rem;
    transition: all 0.2s;
    position: relative;
  }

  .search-results :global(li:hover) {
    background: rgba(37, 248, 142, 0.1);
    border-color: var(--guide-green);
    transform: translateX(4px);
  }

  .search-results :global(li::before) {
    content: ">";
    position: absolute;
    left: -1rem;
    opacity: 0;
    color: var(--guide-green);
    transition: all 0.2s;
  }

  .search-results :global(li:hover::before) {
    opacity: 1;
    left: -1.5rem;
  }

  .search-results :global(a) {
    color: var(--guide-green);
    text-decoration: none;
    font-weight: bold;
    font-size: 1.1rem;
    display: block;
    margin-bottom: 0.5rem;
    transition: all 0.2s;
  }

  .search-results :global(a:hover) {
    text-shadow: 0 0 10px var(--guide-green);
  }

  .search-results :global(li p) {
    margin: 0;
    opacity: 0.8;
    font-size: 0.95rem;
    line-height: 1.4;
  }

  .error {
    text-align: center;
    color: var(--guide-green);
    padding: 2rem;
    margin: 2rem 0;
    background: rgba(37, 248, 142, 0.05);
    border: 1px solid var(--guide-green-25);
    border-radius: 8px;
  }

  .error .note {
    font-size: 0.9rem;
    opacity: 0.7;
    font-style: italic;
    margin-top: 1rem;
  }

  .note {
    font-size: 0.9rem;
    opacity: 0.8;
    font-style: italic;
    text-align: center;
    margin: 1rem 0 0;
  }

  .hidden {
    display: none !important;
  }

  @media (max-width: 768px) {
    h1 {
      font-size: 3rem;
    }

    .search-form {
      flex-direction: column;
    }

    .search-button {
      width: 100%;
    }
  }
</style>
